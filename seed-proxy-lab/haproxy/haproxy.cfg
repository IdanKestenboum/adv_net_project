global
    maxconn 2000
    daemon
    log stdout format raw daemon

defaults
    mode http
    timeout connect 1s
    timeout client  1s
    timeout server  1s
    log global

# TODO: Task 1 - Define stick table for tracking abusive IPs
# Complete the stick table configuration below:
# - Type should be 'ip' for IP-based tracking
# - Size should be 100k entries
# - Expire after 10 minutes
# - Store connection rate over 10 seconds
backend abuse_tracker
    # ** FILL HERE **
    # stick-table type ip size 100k expire 10m store conn_rate(10s)

frontend http-in
    bind *:8081
    log global

    # 1. Bypass path routing (handled first)
    acl is_bypass path_beg /bypass
    use_backend direct_backend if is_bypass

    # 2. Track IP into stick-table
    tcp-request connection track-sc0 src table abuse_tracker

    # TODO: Task 2 - Define ACL for abusive IPs
    # Create an ACL that identifies IPs with more than 20 connections in 10 seconds
    # ** FILL HERE **
    # acl abusive_ip src_conn_rate(abuse_tracker) gt 20

    # 4. Dynamic backend tag based on IP behavior
    http-request set-var(req.backend_name) str(main_backend)
    http-request set-var(req.backend_name) str(reserve_backend) if !abusive_ip

    # 5. Declare capture slot (1 string of 64 bytes)
    capture request header Host len 64

    # 6. Logging format with backend decision
    log-format "SRC=%ci RATE=%[src_conn_rate(abuse_tracker)] BACKEND=%[var(req.backend_name)]"

    # 7. Routing
    use_backend reserve_backend if !abusive_ip
    use_backend main_backend if abusive_ip

backend reserve_backend
    timeout server 1s
    option http-server-close
    server nginx nginx-server:80 maxconn 200 check

backend main_backend
    timeout server 1s
    option http-server-close
    server nginx nginx-server:80 maxconn 800 check

backend direct_backend
    timeout server 1s
    option http-server-close
    server nginx nginx-server:80
